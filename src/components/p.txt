import React, { useEffect, useState } from "react";
import axios from "axios";
import "./PendingOrders.css";

const PendingOrders = () => {
  const [orders, setOrders] = useState([]);
  const [token, setToken] = useState(null);
  const [userId, setUserId] = useState(null);
  const [loading, setLoading] = useState(true);
  const [expandedOrder, setExpandedOrder] = useState(null);

  useEffect(() => {
    const fetchUserData = async () => {
      try {
        console.log("Fetching user data from backend...");
        const response = await axios.get("https://backend.rubiajewels.com/get-user");

        if (response.data.userId && response.data.token) {
          setUserId(response.data.userId);
          setToken(response.data.token);
          console.log("Fetched userId:", response.data.userId);
          console.log("Fetched token:", response.data.token);
        } else {
          console.error("UserId or Token not found in response.");
        }
      } catch (error) {
        console.error(
          "Error fetching user data:",
          error.response?.data || error
        );
      }
    };
    fetchUserData();
  }, []);

  useEffect(() => {
    const fetchOrders = async () => {
      if (!userId || !token) {
        console.log("UserId or token missing, skipping fetch");
        return;
      }

      try {
        console.log("Fetching orders for userId:", userId);
        const response = await axios.get(`https://backend.rubiajewels.com/orders`, {
          headers: { Authorization: `Bearer ${token}` },
        });

        console.log("Fetched orders:", response.data);
        setOrders(response.data);
      } catch (error) {
        console.error("Error fetching orders:", error.response?.data || error);
      } finally {
        setLoading(false);
      }
    };

    fetchOrders();
  }, [userId, token]);

  const toggleExpand = (orderId) => {
    setExpandedOrder(expandedOrder === orderId ? null : orderId);
  };

  return (
    <div className="pending-order-list">
      <h1>Pending Orders</h1>
      <div className="pending-order-controls">
        <select>
          <option value="pending" disabled>
            Pending
          </option>
          <option value="pending-processing">Processing</option>
          <option value="pending-ready-to-ship">Ready to Ship</option>
          <option value="pending-completed">Completed</option>
        </select>
        <button className="pending-go-button">Go</button>
        <button className="pending-excel-button">
          <i className="fa-solid fa-file-excel"></i>
        </button>
      </div>
      <table className="pending-order-table">
        <thead>
          <tr>
            <th>#ID</th>
            <th>ORDER INFO</th>
            <th>SHIPPING</th>
            <th>ORDER DETAILS</th>
            <th>TOTAL AMOUNT</th>
            <th>Action</th>
          </tr>
        </thead>
        <tbody>
          {orders.length === 0 ? (
            <tr>
              <td colSpan="6">No pending orders.</td>
            </tr>
          ) : (
            orders.map((order) => (
              <React.Fragment key={order._id}>
                <tr className="order-card">
                  <td>
                    <input type="checkbox" />
                  </td>
                  <td>
                    <div className="pending-order-info">
                      {/* <div>
                        <strong>Order ID:</strong> {order._id}
                      </div>*/}
                      <div>
                        <strong>Email:</strong> {order.email}
                      </div>
                      <div>
                        <strong>Status:</strong> {order.status}
                      </div>
                      <div>
                        <strong>Order Date:</strong>{" "}
                        {new Date(order.createdAt).toLocaleString()}
                      </div>
                    </div>
                  </td>
                  <td className="address">
                    <div className="pending-order-info">
                      <div>
                        <strong>Name:</strong> {order.firstName}{" "}
                        {order.lastName}
                      </div>
                      <div>
                        <strong>Address:</strong> {order.address}, {order.city},{" "}
                        {order.state}, {order.country} - {order.pincode}
                      </div>
                      <div>
                        {/* <strong>Phone:</strong> {order.phone} */}
                      </div>
                    </div>
                  </td>
                  <td>
                    <div className="pending-order-info">
                      {order.cartItems.map((item) => (
                        <div key={item._id} className="order-item">
                          <img
                            src={`https://backend.rubiajewels.com/${item.image.replace(
                              "\\",
                              "/"
                            )}`}
                            alt={item.name}
                            className="pending-product-info-img"
                          />
                          <div>
                            <strong>Product Name:</strong> {item.name}
                          </div>
                        </div>
                      ))}
                    </div>
                  </td>
                  <td>${order.totalAmount.toFixed(2)}</td>
                  <td>
                    <button
                      className="pending-detail-button"
                      onClick={() => toggleExpand(order._id)}
                    >
                      {expandedOrder === order._id ? "Hide" : "Detail"}
                    </button>
                  </td>
                </tr>

                {/* Expanded Row for Order Details */}
                {expandedOrder === order._id && (
                  <tr className="order-card">
                    <td></td>
                    <td>
                      <div className="pending-order-info">
                        <div>
                          <strong>Order ID:</strong> {order._id}
                        </div>
                        <div>
                          <strong>User ID:</strong> {order.userId}
                        </div>
                        <div>
                          <strong>Email:</strong> {order.email}
                        </div>
                        <div>
                          <strong>Status:</strong> {order.status}
                        </div>
                        <div>
                          <strong>Order Date:</strong>{" "}
                          {new Date(order.createdAt).toLocaleString()}
                        </div>
                      </div>
                    </td>
                    <td>
                      <div className="pending-order-info">
                        <div>
                          <strong>Name:</strong> {order.firstName}{" "}
                          {order.lastName}
                        </div>
                        <div>
                          <strong>Address:</strong> {order.address},{" "}
                          {order.city}, {order.state}, {order.country} -{" "}
                          {order.pincode}
                        </div>
                        <div>
                          <strong>Phone:</strong> {order.phone}
                        </div>
                      </div>
                    </td>
                    <td>
                      <div className="pending-order-info">
                        {order.cartItems.map((item) => (
                          <div key={item._id} className="order-item">
                            {/* <img
                              src={https://backend.rubiajewels.com/${item.image.replace(
                                "\\",
                                "/"
                              )}}
                              alt={item.name}
                              className="pending-product-info-img"
                            /> */}
                            <div>
                              <strong>Product Name:</strong> {item.name}
                            </div>
                            <div>
                              <strong>Color:</strong> {item.color}
                            </div>
                            <div>
                              <strong>Size:</strong> {item.size}
                            </div>
                            <div>
                              <strong>Karat:</strong> {item.karat}
                            </div>
                            <div>
                              <strong>Stone:</strong>{" "}
                              {item.stone ? item.stone : "N/A"}
                            </div>
                            <div>
                              <strong>Quantity:</strong> {item.quantity}
                            </div>
                            <div>
                              <strong>Price:</strong> ${item.price.toFixed(2)}
                            </div>
                          </div>
                        ))}
                      </div>
                    </td>
                    <td> ${order.totalAmount.toFixed(2)}</td>
                  </tr>
                )}
              </React.Fragment>
            ))
          )}
        </tbody>
      </table>
    </div>
  );
};

export default PendingOrders;

















      <div className="order-container">
        {orders
          .filter((order) => order.status === "pending")
          .map((order) => (
            <div key={order._id} className="order-card">
              {/* Order Details Section */}
              <div className="order-header">
                <div className="order-detail-box">
                  <h3>Customer</h3>
                  <p>
                    <strong>First Name: </strong>
                    {order.firstName}
                  </p>
                  <p>
                    <strong>Last Name: </strong>
                    {order.lastName}
                  </p>
                  <p>
                    <strong>Email: </strong>
                    {order.email}
                  </p>
                  <p>
                    <strong>Phone: </strong>
                    {order.phone}
                  </p>
                </div>
                <div className="order-detail-box">
                  <h3>Deliver To</h3>
                  <p>
                    {order.address}, {order.city}, {order.state},{" "}
                    {order.country} - {order.pincode}
                  </p>
                </div>
              </div>

              {/* Order Summary Section */}
              <h2 className="order-title">Order #{order._id}</h2>
              <table className="order-table">
                <thead>
                  <tr>
                    <th>Id</th>
                    <th>Image</th>
                    <th>Product</th>
                    <th>Product Id</th>
                    <th>Karats</th>
                    <th>Color</th>
                    <th>Quantity</th>
                    <th>Ring Size</th>
                    <th>Price</th>
                    <th>Total</th>
                  </tr>
                </thead>
                <tbody>
                  {order.cartItems.map((item, index) => (
                    <tr key={item._id}>
                      <td>{index + 1}</td>
                      <td>
                        <img
                          src={`https://backend.rubiajewels.com/${item.image.replace(
                            "\\",
                            "/"
                          )}`}
                          alt={item.name}
                          className="order-item-img"
                        />
                      </td>
                      <td>{item.name}</td>
                      <td>{item.productId}</td>
                      <td>{item.karat}</td>
                      <td>{item.color}</td>
                      <td>{item.quantity}</td>
                      <td>{item.size || "N/A"}</td>
                      <td>
                        {item.price ? `₹ ${item.price.toFixed(2)}` : "N/A"}
                      </td>
                      <td>₹ {item.quantity * (item.price || 0).toFixed(2)}</td>
                    </tr>
                  ))}
                </tbody>
              </table>

              {/* Grand Total */}
              <div className="order-total">
                <h3>Grand Total: ₹ {order.totalAmount.toFixed(2)}</h3>
              </div>
            </div>
          ))}
      </div>